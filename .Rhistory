install.packages("dplyr")
?ggplot
install.packages("ggplot2")
?ggplot
library(ggplot2)
?ggplot
?Multinom
library(nnet)
?multinom
# IODS final assignment
# Henna Kettunen
setwd("L:\\Users\\Henna\\storage\\r\\iods\\IODS-final")
library(tidyr)
library(dplyr)
library(ggplot2)
load("tree_data.RData")
# Summary
summary(dat)
# Histograms
library(reshape2)
mdat <- melt(dat)
ggplot(mdat, aes(value)) + geom_histogram(fill="#009E73") + facet_wrap(~ variable, scales="free")
# Scatterplot matrix
pairs(dat, cex=0.1, pch=16, col=dat$Genus)
# Correlation matrix
library(corrplot)
cor_matrix <- cor(dat[,2:ncol(dat)])
corrplot(cor_matrix, method="circle", type="upper", cl.pos="b", tl.pos="d", tl.cex=0.6)
# Drop correlated variables
drop <- c("leaf_toughness", "C_N", "SLA")
dat <- dat[,!colnames(dat) %in% drop]
## Multinomial logistic regression
# Divide to training and test sets
# ind <- sample(nrow(dat), nrow(dat)*0.5)
# save(ind, file="ind.RData")
load("ind.RData")
train <- dat[ind,]
test <- dat[-ind,]
# IODS final assignment
# Henna Kettunen
setwd("L:\\Users\\Henna\\storage\\r\\iods\\IODS-final\\IODS-final")
library(tidyr)
library(dplyr)
library(ggplot2)
load("tree_data.RData")
# Summary
summary(dat)
# Histograms
library(reshape2)
mdat <- melt(dat)
ggplot(mdat, aes(value)) + geom_histogram(fill="#009E73") + facet_wrap(~ variable, scales="free")
# Scatterplot matrix
pairs(dat, cex=0.1, pch=16, col=dat$Genus)
# Correlation matrix
library(corrplot)
cor_matrix <- cor(dat[,2:ncol(dat)])
corrplot(cor_matrix, method="circle", type="upper", cl.pos="b", tl.pos="d", tl.cex=0.6)
# Drop correlated variables
drop <- c("leaf_toughness", "C_N", "SLA")
dat <- dat[,!colnames(dat) %in% drop]
load("ind.RData")
train <- dat[ind,]
test <- dat[-ind,]
library(nnet)
fit1 <- multinom(Genus ~ ., data = train)
fit1 <- multinom(Genus ~ ., data = train, verbose=F)
library(MASS)
?stepAIC
?visreg
library(visreg)
?visreg
visreq(fit2, xvar="leaf_thickness", collapse=T, type="conditional")
library(visreg)
visreg(fit2, xvar="leaf_thickness", collapse=T, type="conditional")
fit2 <- multinom(Genus ~ leaf_thickness + sapwood_density + N + C13 + chlorophyll_concentration + surface_area, data = train)
visreg(fit2, xvar="leaf_thickness", collapse=T, type="conditional")
visreg(fit2, xvar="leaf_thickness", collapse=T, type="contrast")
tab3
tab3 <- table(pred=pred2, obs=genus)
pred2 <- predict(fit2, newdata=test)
pred2p <- as.data.frame(fitted(fit2))
tab3 <- table(pred=pred2, obs=genus)
tab4 <- as.data.frame(tab3)
# IODS final assignment
# Henna Kettunen
setwd("L:\\Users\\Henna\\storage\\r\\iods\\IODS-final\\IODS-final")
library(tidyr)
library(dplyr)
library(ggplot2)
load("tree_data.RData")
# Summary
summary(dat)
# Histograms
library(reshape2)
mdat <- melt(dat)
ggplot(mdat, aes(value)) + geom_histogram(fill="#009E73") + facet_wrap(~ variable, scales="free")
# Scatterplot matrix
pairs(dat, cex=0.1, pch=16, col=dat$Genus)
# Correlation matrix
library(corrplot)
cor_matrix <- cor(dat[,2:ncol(dat)])
corrplot(cor_matrix, method="circle", type="upper", cl.pos="b", tl.pos="d", tl.cex=0.6)
# Drop correlated variables
drop <- c("leaf_toughness", "C_N", "SLA")
dat <- dat[,!colnames(dat) %in% drop]
## Multinomial logistic regression
# Divide to training and test sets
# ind <- sample(nrow(dat), nrow(dat)*0.5)
# save(ind, file="ind.RData")
load("ind.RData")
train <- dat[ind,]
test <- dat[-ind,]
# Full main effects model
library(nnet)
fit1 <- multinom(Genus ~ ., data = train)
pred1 <- predict(fit1, newdata=test)
genus <- test$Genus
tab <- table(pred=pred1, obs=genus)
tab2 <- as.data.frame(tab)
# Correct rate
cor1 <- sum(tab2$Freq[tab2$pred==tab2$obs])/nrow(test)
tab
corg <- tab2[tab2$pred==tab2$obs,c("pred","Freq")]
cor1
# Model selection
library(MASS)
step <- stepAIC(fit1, direction="backward")
# Best model according to AIC
fit2 <- multinom(Genus ~ leaf_thickness + sapwood_density + N + C13 + chlorophyll_concentration + surface_area, data = train)
pred2 <- predict(fit2, newdata=test)
pred2p <- as.data.frame(fitted(fit2))
tab3 <- table(pred=pred2, obs=genus)
tab4 <- as.data.frame(tab3)
# Correct rate
cor2 <- sum(tab4$Freq[tab4$pred==tab4$obs])/nrow(test)
cor2
tab3 <- table(pred=pred2, obs=genus)
tab3
prop.table(tab3, 2)
round(prop.table(tab3, 2), 2)
round(prop.table(tab3, 2), 3)
corg <- tab2[tab2$pred==tab2$obs,c("pred","Freq")]
corg
round(prop.table(tab3, 2), 3)
round(summary(fit2), 3)
summary(Fit2)
summary(fit2)
exp(coef(fit2))
round(exp(coef(fit2)), 2)
round(exp(coef(fit2)), 3)
round(exp(coef(fit2)), 4)
round(exp(coef(fit2)), 3)
Anova(fit2)
library(car)
Anova(fit2)
AIC(fit4)
fit4 <- multinom(Genus ~ leaf_thickness + sapwood_density + N + chlorophyll_concentration + surface_area, data = train)
AIC(fit4)
AIC(fit2)
?predict.multinom
?predict
tmp <- predict.multinom(fit2)
tmp <- predict(fit2)
?predict
test.multinom(fit1)
test(fit2)
p
# 2-tailed Wald test
z <- summary(fit2)$coefficients/summary(fit2)$standard.errors
p <- (1 - pnorm(abs(z), 0, 1)) * 2
p
round(p, 3)
Anova(fit2)
AIC(fit4)
summary(fit2)
visreg(fit2, xvar="leaf_thickness", collapse=T, type="conditional")
visreg(fit2, xvar="sapwood_density", collapse=T, type="conditional")
visreg(fit2, xvar="N", collapse=T, type="conditional")
visreg(fit2, xvar="C13", collapse=T, type="conditional")
visreg(fit2, xvar="chlorophyll_concentration", collapse=T, type="conditional")
visreg(fit2, xvar="surface_area", collapse=T, type="conditional")
methods(predoct)
methods(predict)
predict.multinom(fit2)
predict(fit2)
predict(fit2, type="conditional")
predict(fit2, response="conditional")
predict(fit2, "probs")
predict(fit2, type="probs")
tab3
*Es1/6
1/6
prob.table(tab3, 2)
prop.table(tab3, 2)
round(prop.table(tab3, 2), 2)
specn2 <- length(unique(dat$name))
specn2
fam50 <- unique(trees[trees$Genus %in% gen50$Genus, c("Family","Genus")])
# IODS final assignment
# Henna Kettunen
setwd("L:\\Users\\Henna\\storage\\r\\iods\\IODS-final")
library(tidyr)
library(dplyr)
# Tropical tree leaf data from BRIDGE database obtained via TRY
trees <- read.csv("trees.csv")
str(trees)
# Combine genus and species to a same column
trees$name <- paste0(trees$Genus, "_", trees$species)
# How many families? 59
famn <- summarise(trees, nfam=n_distinct(Family))
# How many genera? 222
genn <- summarise(trees, nfam=n_distinct(Genus))
# How many species? 646
specn <- summarise(trees, nfam=n_distinct(name))
# How many genera per family?
ngen <- trees %>% group_by(Family) %>% summarise(ngen=n_distinct(Genus))
# How many species per genus?
nspec <- trees %>% group_by(Genus) %>% summarise(nspec=n_distinct(species))
# How many observations per species?
nobs <- count(trees[complete.cases(trees)==T,], name)
nobs <- arrange(nobs, desc(n))
nobs[1:10,]
setwd("L:\\Users\\Henna\\storage\\r\\iods\\IODS-final")
trees <- read.csv("trees.csv")
str(trees)
setwd("L:\\Users\\Henna\\storage\\r\\iods\\IODS-final\\IODS-final")
trees <- read.csv("trees.csv")
str(trees)
trees$name <- paste0(trees$Genus, "_", trees$species)
famn <- summarise(trees, nfam=n_distinct(Family))
genn <- summarise(trees, nfam=n_distinct(Genus))
specn <- summarise(trees, nfam=n_distinct(name))
ngen <- trees %>% group_by(Family) %>% summarise(ngen=n_distinct(Genus))
nspec <- trees %>% group_by(Genus) %>% summarise(nspec=n_distinct(species))
nobs <- count(trees[complete.cases(trees)==T,], name)
nobs <- arrange(nobs, desc(n))
nobs[1:10,]
nobsg <- trees[complete.cases(trees),] %>% group_by(Genus) %>% summarise(nobs=n())
nobsg <- arrange(nobsg, desc(nobs))
gen50 <- nobsg[which(nobsg$nobs>=50),]
gen50 <- gen50[gen50$Genus!="IND",]
fam50 <- unique(trees[trees$Genus %in% gen50$Genus, c("Family","Genus")])
fam50$n.obs <- gen50$nobs[match(fam50$Genus, gen50$Genus)]
dat <- trees[complete.cases(trees) & trees$Genus %in% gen50$Genus,]
specn2 <- length(unique(dat$name))
specn2
fam50
nspec2 <- dat %>% group_by(Genus) %>% summarise(nspec=n_distinct(species))
fam50$n.spec <- nspec2$nspec[match(fam50$Genus, nspec2$Genus)]
fam50
round(prop.table(tab3,2),2)
fam50
summary(fit1)
?summary
summary(fit1, digits=2)
summary(fit1, digits=3)
summary(fit1, digits=1)
summary(fit1, digits=2)
summary(step)
summary(step)
step
tab3p <- round(prop.table(tab3, 2), 2)
tab3p
fam50
visreg(fit2, xvar="leaf_thickness", collapse=T, type="conditional")
visreg(fit2, xvar="sapwood_density", collapse=T, type="conditional")
?switch
install.packages("animations")
install.packages("animation")
library(animation)
?animation
